diff --git a/src/backend/utils/error/elog.c b/src/backend/utils/error/elog.c
--- a/src/backend/utils/error/elog.c
+++ b/src/backend/utils/error/elog.c
@@ -85,9 +85,9 @@
 
 
 /* Global variables */
-ErrorContextCallback *error_context_stack = NULL;
+ErrorContextCallback __thread *error_context_stack = NULL;
 
-sigjmp_buf *PG_exception_stack = NULL;
+sigjmp_buf __thread *PG_exception_stack = NULL;
 
 extern bool redirection_done;
 
@@ -137,11 +137,11 @@
 /* We provide a small stack of ErrorData records for re-entrant cases */
 #define ERRORDATA_STACK_SIZE  5
 
-static ErrorData errordata[ERRORDATA_STACK_SIZE];
+static __thread ErrorData errordata[ERRORDATA_STACK_SIZE];
 
-static int	errordata_stack_depth = -1; /* index of topmost active frame */
+static __thread int	errordata_stack_depth = -1; /* index of topmost active frame */
 
-static int	recursion_depth = 0;	/* to detect actual recursion */
+static __thread int	recursion_depth = 0;	/* to detect actual recursion */
 
 /*
  * Saved timeval and buffers for formatted timestamps that might be used by
diff --git a/src/backend/utils/mmgr/mcxt.c b/src/backend/utils/mmgr/mcxt.c
--- a/src/backend/utils/mmgr/mcxt.c
+++ b/src/backend/utils/mmgr/mcxt.c
@@ -36,22 +36,22 @@
  *		Default memory context for allocations.
  */
 __attribute__((visibility("default")))
-MemoryContext CurrentMemoryContext = NULL;
+__thread MemoryContext CurrentMemoryContext = NULL;
 
 /*
  * Standard top-level contexts. For a description of the purpose of each
  * of these contexts, refer to src/backend/utils/mmgr/README
  */
-MemoryContext TopMemoryContext = NULL;
-MemoryContext ErrorContext = NULL;
-MemoryContext PostmasterContext = NULL;
-MemoryContext CacheMemoryContext = NULL;
-MemoryContext MessageContext = NULL;
-MemoryContext TopTransactionContext = NULL;
-MemoryContext CurTransactionContext = NULL;
+__thread MemoryContext TopMemoryContext = NULL;
+__thread MemoryContext ErrorContext = NULL;
+__thread MemoryContext PostmasterContext = NULL;
+__thread MemoryContext CacheMemoryContext = NULL;
+__thread MemoryContext MessageContext = NULL;
+__thread MemoryContext TopTransactionContext = NULL;
+__thread MemoryContext CurTransactionContext = NULL;
 
 /* This is a transient link to the active portal's memory context: */
-MemoryContext PortalContext = NULL;
+__thread MemoryContext PortalContext = NULL;
 
 static void MemoryContextCallResetCallbacks(MemoryContext context);
 static void MemoryContextStatsInternal(MemoryContext context, int level,
diff --git a/src/include/utils/catcache.h b/src/include/utils/catcache.h
--- a/src/include/utils/catcache.h
+++ b/src/include/utils/catcache.h
@@ -187,7 +187,7 @@
 
 
 /* this extern duplicates utils/memutils.h... */
-extern PGDLLIMPORT MemoryContext CacheMemoryContext;
+extern PGDLLIMPORT __thread MemoryContext CacheMemoryContext;
 
 extern void CreateCacheMemoryContext(void);
 
diff --git a/src/include/utils/elog.h b/src/include/utils/elog.h
--- a/src/include/utils/elog.h
+++ b/src/include/utils/elog.h
@@ -255,7 +255,7 @@
 	void	   *arg;
 } ErrorContextCallback;
 
-extern PGDLLIMPORT ErrorContextCallback *error_context_stack;
+extern PGDLLIMPORT __thread ErrorContextCallback *error_context_stack;
 
 
 /*----------
@@ -332,7 +332,7 @@
 	(pg_re_throw(), pg_unreachable())
 #endif
 
-extern PGDLLIMPORT sigjmp_buf *PG_exception_stack;
+extern PGDLLIMPORT __thread sigjmp_buf *PG_exception_stack;
 
 
 /* Stuff that error handlers might want to use */
diff --git a/src/include/utils/memutils.h b/src/include/utils/memutils.h
--- a/src/include/utils/memutils.h
+++ b/src/include/utils/memutils.h
@@ -52,16 +52,16 @@
  * Only TopMemoryContext and ErrorContext are initialized by
  * MemoryContextInit() itself.
  */
-extern PGDLLIMPORT MemoryContext TopMemoryContext;
-extern PGDLLIMPORT MemoryContext ErrorContext;
-extern PGDLLIMPORT MemoryContext PostmasterContext;
-extern PGDLLIMPORT MemoryContext CacheMemoryContext;
-extern PGDLLIMPORT MemoryContext MessageContext;
-extern PGDLLIMPORT MemoryContext TopTransactionContext;
-extern PGDLLIMPORT MemoryContext CurTransactionContext;
+extern PGDLLIMPORT __thread MemoryContext TopMemoryContext;
+extern PGDLLIMPORT __thread MemoryContext ErrorContext;
+extern PGDLLIMPORT __thread MemoryContext PostmasterContext;
+extern PGDLLIMPORT __thread MemoryContext CacheMemoryContext;
+extern PGDLLIMPORT __thread MemoryContext MessageContext;
+extern PGDLLIMPORT __thread MemoryContext TopTransactionContext;
+extern PGDLLIMPORT __thread MemoryContext CurTransactionContext;
 
 /* This is a transient link to the active portal's memory context: */
-extern PGDLLIMPORT MemoryContext PortalContext;
+extern PGDLLIMPORT __thread MemoryContext PortalContext;
 
 /* Backwards compatibility macro */
 #define MemoryContextResetAndDeleteChildren(ctx) MemoryContextReset(ctx)
diff --git a/src/include/utils/palloc.h b/src/include/utils/palloc.h
--- a/src/include/utils/palloc.h
+++ b/src/include/utils/palloc.h
@@ -56,7 +56,7 @@
  * Avoid accessing it directly!  Instead, use MemoryContextSwitchTo()
  * to change the setting.
  */
-extern PGDLLIMPORT MemoryContext CurrentMemoryContext;
+extern PGDLLIMPORT __thread MemoryContext CurrentMemoryContext;
 
 /*
  * Flags for MemoryContextAllocExtended.
diff --git a/src/backend/utils/mmgr/aset.c b/src/backend/utils/mmgr/aset.c
--- a/src/backend/utils/mmgr/aset.c
+++ b/src/backend/utils/mmgr/aset.c
@@ -252,7 +252,7 @@
 } AllocSetFreeList;
 
 /* context_freelists[0] is for default params, [1] for small params */
-static AllocSetFreeList context_freelists[2] =
+static __thread AllocSetFreeList context_freelists[2] =
 {
 	{
 		0, NULL
